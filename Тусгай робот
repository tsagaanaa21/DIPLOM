#include <Dynamixel2Arduino.h>

// Please modify it to suit your hardware.
#if defined(ARDUINO_AVR_UNO) || defined(ARDUINO_AVR_MEGA2560) // When using DynamixelShield
#include <SoftwareSerial.h>
SoftwareSerial soft_serial(7, 8); // DYNAMIXELShield UART RX/TX
#define DXL_SERIAL   Serial
#define DEBUG_SERIAL soft_serial
const int DXL_DIR_PIN = 2; // DYNAMIXEL Shield DIR PIN
#elif defined(ARDUINO_SAM_DUE) // When using DynamixelShield
#define DXL_SERIAL   Serial
#define DEBUG_SERIAL SerialUSB
const int DXL_DIR_PIN = 2; // DYNAMIXEL Shield DIR PIN
#elif defined(ARDUINO_SAM_ZERO) // When using DynamixelShield
#define DXL_SERIAL   Serial1
#define DEBUG_SERIAL SerialUSB
const int DXL_DIR_PIN = 2; // DYNAMIXEL Shield DIR PIN
#elif defined(ARDUINO_OpenCM904) // When using official ROBOTIS board with DXL circuit.
#define DXL_SERIAL   Serial3 //OpenCM9.04 EXP Board's DXL port Serial. (Serial1 for the DXL port on the OpenCM 9.04 board)
#define DEBUG_SERIAL Serial
const int DXL_DIR_PIN = 22; //OpenCM9.04 EXP Board's DIR PIN. (28 for the DXL port on the OpenCM 9.04 board)

#elif defined(ARDUINO_OpenCR) // When using official ROBOTIS board with DXL circuit.
// For OpenCR, there is a DXL Power Enable pin, so you must initialize and control it.
// Reference link : https://github.com/ROBOTIS-GIT/OpenCR/blob/master/arduino/opencr_arduino/opencr/libraries/DynamixelSDK/src/dynamixel_sdk/port_handler_arduino.cpp#L78
#define DXL_SERIAL   Serial3
#define DEBUG_SERIAL Serial
const int DXL_DIR_PIN = 84; // OpenCR Board's DIR PIN.
#elif defined(ARDUINO_OpenRB)  // When using OpenRB-150
//OpenRB does not require the DIR control pin.
#define DXL_SERIAL Serial1
#define DEBUG_SERIAL Serial
const int DXL_DIR_PIN = -1;
#else // Other boards when using DynamixelShield
#define DXL_SERIAL   Serial1
#define DEBUG_SERIAL Serial
const int DXL_DIR_PIN = 2; // DYNAMIXEL Shield DIR PIN
#endif
////motor speed
double spdA;
int spda;
double spdB;
int spdb;
const uint8_t DXL_ID1 = 10;
const uint8_t DXL_ID2 = 13;
const float DXL_PROTOCOL_VERSION = 1.0;
Dynamixel2Arduino dxl(DXL_SERIAL, DXL_DIR_PIN);

//This namespace is required to use Control table item names
using namespace ControlTableItem;
/////////////////
#include <Stepper.h>
#define STEPS 200
Stepper stepper(STEPS, 2, 3); // Pin 2 connected to DIRECTION & Pin 3 connected to STEP Pin of Driver
#define motorInterfaceType 1
const int stepPin = 3;
const int dirPin = 2;
// defining the pins
const int trigPin1 = 10;
const int echoPin1 = 11;
const int trigPin2 = 6;
const int echoPin2 = 9;
int ir = 7;
long duration1;
long duration2;
int distanceleft;
int distancefront;
int a = 0;
///////////////
const unsigned int MAX_MESSAGE_LENGTH = 12;

void setup() {
  pinMode(stepPin, OUTPUT);
  pinMode(dirPin, OUTPUT);
  pinMode(trigPin1, OUTPUT);
  pinMode(trigPin2, OUTPUT);
  pinMode(echoPin1, INPUT);
  pinMode(echoPin2, INPUT);
  pinMode(ir, INPUT);
  stepper.setSpeed(500);
  // Use UART port of DYNAMIXEL Shield to debug.
  DEBUG_SERIAL.begin(115200);
  // Set Port baudrate to 115200bps. This has to match with DYNAMIXEL baudrate.
  //  dxl.begin(115200);
  dxl.begin(1000000);
  // Set Port Protocol Version. This has to match with DYNAMIXEL protocol version.
  dxl.setPortProtocolVersion(DXL_PROTOCOL_VERSION);
  // Get DYNAMIXEL information
  //dxl.ping(DXL_ID);
  dxl.ping(DXL_ID1);
  dxl.ping(DXL_ID2);

  // Turn off torque when configuring items in EEPROM area
  //dxl.torqueOff(DXL_ID);
  dxl.torqueOff(DXL_ID1);
  dxl.torqueOff(DXL_ID2);
  dxl.setOperatingMode(DXL_ID1, OP_VELOCITY);
  dxl.setOperatingMode(DXL_ID2, OP_VELOCITY);
  dxl.torqueOn(DXL_ID1);
  dxl.torqueOn(DXL_ID2);
  //dxl.ledOn(DXL_ID);
}
void loop() {
  int irpin = digitalRead(ir);
  while (DEBUG_SERIAL.available() > 0)
  {
    //Create a place to hold the incoming message
    static char message[MAX_MESSAGE_LENGTH];
    static unsigned int message_pos = 0;

    //Read the next available byte in the serial receive buffer
    char inByte = DEBUG_SERIAL.read();

    //Message coming in (check not terminating character) and guard for over message size
    if ( inByte != '\n' && (message_pos < MAX_MESSAGE_LENGTH - 1) )
    {
      //Add the incoming byte to our message
      message[message_pos] = inByte;
      message_pos++;
    }
    //Full message received...
    else
    {
      //Add null character to string
      message[message_pos] = '\0';

      //Print the message (or do other things)
      DEBUG_SERIAL.println(message);
      if (message[0] == 'o' && message[1] == 'n') {
        dxl.ledOn(DXL_ID1);
        dxl.ledOn(DXL_ID2);
      }
      else if (message[0] == 'o' && message[1] == 'f' && message[2] == 'f') {
        dxl.ledOff(DXL_ID1);
        dxl.ledOff(DXL_ID2);
      }
      else if (message[0] == 's' && message[1] == 't' && message[2] == 'o' && message[3] == 'p') {
        dxl.setGoalVelocity(DXL_ID1, 0);
        dxl.setGoalVelocity(DXL_ID2, 0);
      }
      else if (message[0] == 'r' && message[1] == 'i' && message[2] == 'g' && message[3] == 'h' && message[4] == 't') { // Turn right
        dxl.setGoalVelocity(DXL_ID1, 10); //Right
        dxl.setGoalVelocity(DXL_ID2, 10); //Left
      }
      else if (message[0] == 'l' && message[1] == 'e' && message[2] == 'f' && message[3] == 't') { // Turn left
        dxl.setGoalVelocity(DXL_ID1, 1024 + 10); //Right
        dxl.setGoalVelocity(DXL_ID2, 1024 + 10); //Left
      }
      else if (message[0] == 'b' && message[1] == 'a' && message[2] == 'c' && message[3] == 'k') { // Back
        dxl.setGoalVelocity(DXL_ID1, 10);
        dxl.setGoalVelocity(DXL_ID2, 1024 + 10);
      }
      else if (message[0] == 'r' && message[1] == 'u' && message[2] == 'n') { // Run
        dxl.setGoalVelocity(DXL_ID1, 1024 + 10);
        dxl.setGoalVelocity(DXL_ID2, 10);
      }
      else if (message[0] == 'b' && message[1] == 'u' && message[2] == 'd') { // Run
        if (irpin == HIGH) {
          steppe();
        }
        else {
          sto();
        }
      }
      else if (message[0] == 's' && message[1] == 't' && message[2] == 'a') {//auto
        if (irpin == HIGH) {
          Auto();
        }
        else {
          sto();
        }
      }
      else if (message[0] == 's' && message[1] == 't' && message[2] == 'o') {//auto
        sto();
      }
      //Reset for the next message
      message_pos = 0;
      message[0] = '\0';
      message[1] = '\0';
      message[2] = '\0';
      message[3] = '\0';
    }
  }
}
void Auto() {
  boolean left, front = false;
  digitalWrite(trigPin1, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin1, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin1, LOW);
  duration1 = pulseIn(echoPin1, HIGH);
  distanceleft = duration1 * 0.034 / 2;
  ///////////////////////////
  digitalWrite(trigPin2, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin2, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin2, LOW);
  duration2 = pulseIn(echoPin2, HIGH);
  distancefront = duration2 * 0.034 / 2;
  if (12 <= distanceleft <= 8 ) {
    left = true;
  }
  if (12 <= distancefront <= 8 ) {
    front = true;
  }
  if (left == true && front == false) {
    //    dxl.setGoalVelocity(DXL_ID1, 0);
    //    dxl.setGoalVelocity(DXL_ID2, 0);
    //    steppe();
    dxl.setGoalVelocity(DXL_ID1, 10 + 1024);/////forward
    dxl.setGoalVelocity(DXL_ID2, 10);
    //    delay(100);
  }
  if (left == false && front == true || left == true && front == true ) {
    dxl.setGoalVelocity(DXL_ID1, 10); //Right
    dxl.setGoalVelocity(DXL_ID2, 10);
    //    delay(1050);
  }
  if (left == false && front == false)
  {
    dxl.setGoalVelocity(DXL_ID1, 1024 + 10);
    dxl.setGoalVelocity(DXL_ID2, 1024 + 10); //Left
  }
  else {
    dxl.setGoalVelocity(DXL_ID1, 10 + 1024);
    dxl.setGoalVelocity(DXL_ID2, 10 + 1024);
    //    delay(1000);
  }
}
void steppe() {
  for (int x = 0; x < 250; x++)
  { stepper.step(10);
  }
  for (int x = 250; x > 0; x--)
  { stepper.step(-10);
  }
}
void sto() {
  dxl.setGoalVelocity(DXL_ID1, 0);
  dxl.setGoalVelocity(DXL_ID2, 0);
  stepper.step(0);
}